# Changelog

TODO: Do proper wave surfer, at least for 1on1. I.e. be smarter with point
choice, some (weak) attempt done in v6.2

TODO: try to increase melee bullet power, HawkOnFire often get more bullet
damage bonus than me.

TODO: make center of the field more dangerous in melee, so bot moves closer to
the wall. simple.Wall has amaizing survival rate, with simple trick. See
voidious.Diamond too.

TODO: count only passed wave when updating firing stats.

TODO: calculate danger of a point according to angle at which all bots are
seen. The smaller the better, since I see all bots with less radar sweeps.

TODO: check linear and circular guns for the check when last points is not
available at the fire request time, so one had to extrapolate to this time.

TODO: take in account wave fired by other bots to calculate my guns stats

TODO: ramming attack if guns fail

TODO: chose best firing angle gun, the one which hits most targets

TODO: find optimal number of new variants of the path on every tick, while
yet avoid skipped turns.

TODO: increase bullet power in 1on1 to something like 1500/dist. Survival
bonus is small but bullet bonus is increases with bullet energy. So it better
aim for higher bullet damage than survival bonus.

TODO: see why in melee, the bot likes to sit still near the wall or conner, it
start to happen near v1.5. Looks it due to changes introduced in v1.4
May be add maximum staying time in a given point. Looks like survival in melee
is a bit worse for v1.4 than for v1.3

TODO: see why bot does not fire when energy drops below 1. Usually, it does
not fire when remaining energy is 0.6

TODO: take in account guess factor stats collected by other bots

TODO: move enemy firing logic to enemy gunManager

TODO: make guess factor flattener

TODO: make antiAntiGrav gun: which tries to predict enemy motion based on
anti-grav physics

TODO: improve flipLastGuessFactorGun, or make new one with cross correlation
analysis. Looks like there is anti correlation between odd/even waves.
Looks like it was quite crazy idea, though it did help to boost APS in
roborumbles.

TODO: play with fighterBot danger radius. When I  changed 100 -> 200, I saw
drastic drop of APS in melee for my test set. But is seems to keep master bot
from crossfire situations, so may be I need it to depend on number of
opponents.

TODO: work on guess factor lagging gun. There are typically 3-4 wave of my
bots in the air, so when we fire, we do not know last 3-4 guess factors, so we
should look for correlation between 3-4 shots in the past. Quick octave plot
reveals that there is a correlation for the lags up to 4 (sometimes 5) even
for the top bots  and than it is lost. So we should make a map
oldLaggingGF->firingGF, which is 2D distribution map and look for
correlations.

TODO: if radar looks other way, onHitByBullet -> scheduledEdrop wrongly force  enemy to emmit 
non existing bullet. Need to check the last scan time and scheduledEdrop time
to avoid this.

DONE: analyze missed bullets to see which gun the enemy was using. Cannot be
done, this event is not provided for enemy bullets

## v6.5

Skipping v6.3 and v6.4. Only EvBotNG was changing but framework was not.
This synchronizes framework and EvBotNG versions.

- added nice textual plots/histograms for arrays. Very handy for debugging.
- reworked logic of kdTree nodes calculations
- guess factors are smoother now

## v6.2

- in 1 on 1 situation surf only the oldest (hopefully closest wave), this
  seems to help against GF counting guns
- 1on1 point to go calculation favors orthogonal to target motion
- border uncertainty detection is almost 0 now, insetead of 1.1
- Added proper circular acceleration gun
- fixed rotation rate calculation
- added MEA marker on enemy wave

## v6.1

Disable fancy bullet energy search. I.e. back to v5.5 bullet logic.

## v6.0

Added track of my score (all game types) and enemy (for 1on1 only). Using it,
attempting to optimize the APS by changing "ideal bullet energy".

## v5.5

Revert bullet energy back for the case of melee, 1on1 stays the same as in v5.4.

## v5.4

Some simplification of the KdTree coordinate code. It is more general and
located in one place now.

Modified bulletEnergy logic to pick 1.95 unless enemy is closer than 140.
This energy selection was spotted in Chase's cs.Nene 1.05 bot.
Test shows that it drastically improve score against stronger bots.


## v5.3

master bot takes gun performance from the KdTree, i.e., it does not use
overall gun performance but it is more adaptive. Rationale, some gun a better
at certain distances/situations.


## v5.2

bug fix: distance to the wall ahead was not assigned for enemy bots stat points

-  botStatPoint now contains timeSinceVelocityChange
-  KdTree has new dimention: timeSinceVelocityChange

## v5.1

v5.0 was better in roborumble but I lost in meleerumble. So some
readjustments:

-  Reduced number of neighbors in kdtreeGuessFactorGun 1000->100.
-  kdtree has new dimentions distance to wall ahead and enemies number.


## v5.0

Added KdTree gun with distance, bulletSpeed, lateral speed, and acceleration
coordinates.

## v4.9

Slightly decreased gun performance weight.

## v4.8

Do not lock radar if no firing solutions are present.

Disable 
-   decrease fire to minimum if we are below enemy (in 1on1 situations),
from the  previous version. This gave significant drop in 1on1 APS.

Redone logic of do not fire. Essentially, I try to decrease bullet power ( to 0
if needed) to keep my energy above enemy if I am on 1on1 or no bullets in the air.

## v4.7

Energy management:
-   increase fire power if we have significant surplus of energy, 
-   decrease fire to minimum if we are below enemy (in 1on1 situations),
-   do not fire into non firing enemy, if it brings my power below the enemy

## v4.6

Weight due to gun performance redone/increased.

Redone the logic for the best firing solution based on weight distribution.

## v4.5

Added aim at everyone logic. 

Commented out the fired count weight when deciding on a robot weight. 

Bot weights calculated only once per tic.

Added debugging graphics: firing angles and gun performance indication.

## v4.4

Fixed gun delayed info accounting.

All gun correct the firing solution to make firing angle along the wall
if the firing bot is sufficiently close to the wall. This should waste less
bullets.

## v4.3

Increased bullet energy a bit, v4.2 change greately increased survival in
melee, but APS dropped by about 1%.

## v4.2

x.x5 exploit redone to round to smaller side

Modified bullet energy vs distance formula to die off quickly, it improves
survival

## v4.1

Added ability to calculate overall danger of a wave from GF stats, it is not
used for now, since I do not see score improvements. But should help with bot
GF flattener in the future.

Attempt to use x.x5 power bullet detection bug in the bots based on
BasicSurfer.

## v4.0

Bullets and wave danger is calculated on the shadow and guess factors, i.e. no
real space distance calculations. This gives tremendous speed up. This new way
of calculations justifies bumping up the major version.

Safety corridors are properly taken in account for wave danger calculations.

Nice plot of the GF danger for enemy bots wave.

## v3.7

GF updates touch the range of angles covered by a bot body

Added safety corridors capabilities. I.e., bullet and bots shadows.

## v3.6

Each GF gun has its own threshold for goodness decision. As result decayin GF
guns fire now.

## v3.5

Retune the point when GF guns provide results.

## v3.4

New gun: assistedGFGun. This is the guess factor gun with segmentation on
guess factor suggested by the accelerating circular gun at the time of fire.
The idea that there is some correlations, and for some bots I see it. Mine is
certainly have some correlation on such segmentation.

Prepared to collect more statistics at the time of fire, so far it is only
distance.

## v3.3

It is bad idea to be in multiple crossfires, but this is what happens in 1 vs
4 if my bot is in the middle, it become the closest to all, thus everyone fires
at us.  So, In melee when number of enemies = 4, the center of the battlefield has danger.


## v3.2

Added the circular gun which handles an accelerating bot.

## v3.1

Put a safety net around a potential problem spot. When a ficticios wave is
asked to be added from a bit which rams with me before a radar had a chance to
see it. This use to throw the "null pointer exception" which propagates for
the rest of the match.


## v3.0

Remove attractive potential from energentic but non firing bot.

## v2.9

CoreBot caches time, for getTime() calls.

If bot does not fire, it is taken in account as its reduced danger. So my bot
will come closer, if bot has no energy to fire it will ram it.

## v2.8

Reverted target selection logic to v2.6

If a point is the closest to enemy, this enemy danger raius increased, to push
away my bot from being the closest to the enemy. Should increase
survivability.

Even not the closest enemy fires at master bot sometimes, this helps with no
motion freeze when all other bots are the closest to somenone else. But some
no so advance bot fire at any target in a view (walls, crazy, etc ).


## v2.7

Redone target selection logic

## v2.6

Revert back number largest number of bots when I fire a wave to everyone: 10->4

## v2.5

When counting hits and missed fire, do it only for waves which passed over a
bot. This avoid counting as missed the waves which are still in the air when
enemy dies, also for the case of virtual bullets, it does not count as a miss
the case when radar was looking away during the wave pass over the bot.

Increase number of bots to which I fire virtual waves at melee: 4 -> 10

## v2.4

Fixed bug, with double counting of the master bot gun shots, which was
introduced in v2.3

## v2.3

Proper counting stats for real enemy hits.

Take in account enemy hit stats, when calculate firing solution danger.

Circular gun use a more general method to find intercept, 
it also tries to project target motion if stats are delayed.

Master bot guns are set in config which can hadle different game types.
Enemy bot guns are set in config, as well.

Enemy gunManager is used to provide virtual bullets against master bot

firingSolution plots bullet quality of solution

Added safetyCorridorGun gun to push my bot to safety or random location

## v2.2


In melee radar lock now 2 clicks earlier, than before. Seems to boost score
with my test set.

Circular gun falls back to linear gun scenario, if not enough history
available.

Master bot does not fire linear gun anymore, circular one does its function.


## v2.1

Remove guess factor based guns from the enemy guns array.
These guns were introduced since v1.6 but apparently make the master bot motion more
predictive.  It hearts IWillFireNoBullets roborumble stats,
up to version 2.0 the APS is lower.
Buy now enemy firing and master bot motion logic is the same as it was in
v1.6

Added enemy wave count, to implement lagging guess factor gun.

## v2.0

bug fix: guess factor use the lateral velocity from wrong time

New gun: flipLastGuessFactorGun. I note that many bots including my own
have next wave guess factor close to opposit of the previous wave. This gun
tryes to exploit it.

## v1.9
Disabling mostly orthogonal to the enemy direction path search. Looks like 
it drops rating IWillFireNoBullet by about 2%.

## v1.8

Fixed bug introduced in v1.7:  in 1on1 my bot locked itself in a corner, due
to no danger from corner, and only shallow angle search within orthogonal direction to
the enemy.

## v1.7

Enemy bots fire guess factor gun too.

Master bot has new decaying gueess factor gun.
Enemy bots also fire decayingGuessFactorGun gun at master bot.

New exact path choice in 1on1 type, try to chose points orthogonal to line to
the enemy.

## v1.6

Radar locks on target when gun is cold enough.
Gun aiming is not executed when gun is too hot.
Added guess factor gun for the master bot gun array. Apparently, in the old
EbBot the guess factor gun did not take in account the lateral velocity
direction. So this realization should outperform it.

Optimization:do not calculate path danger if it is already greater than a
known path. This should reduce CPU usage.

## v1.5

Added bullet shielders detection, and fire with offset to circumvent it.
If bot hit enemy bullet, then enemy wave which carries this bullet is removed,
since it has no danger.

Exact path is attempting to find a better path every turn, but with smaller
number of trials than full search.

All very, strange. Melee score went up, but 1on1 down.
Apparently, increasing maximalPathLength to 50 from 32. makes 1on1 motion more
predictable. Will reduce it to see the difference. Checked, looks like it does not
change anything. Maybe it because path was recalculated every tick.

Looking closely at some battles for the v1.3, I conclude that there were a
glitch in the rumble. When run locally with gui, I do not get stellar 100%
survival against bots which rumble reported as such. For example against
zyx.micro.Ant 1.1. The scores also not so awful for the v1.4 as in the rumble.


## v1.4
Attempt to reduce gun calculations:
Enemy wave directed at us only if master bot is the closest or number of
enemies >=3. Consequently enemy waves with no dangerous bullet are
disregarded.

Exact path is calculated for longer time period and is not updated evey tick
any more (unless there is a fire detected or minimal path length is reached).

Added Random gun, to the guns array.

## v1.3
Fixed circularGun bug which was triggered in melee, when no consequent points
are available to figure out velocity rotation.

## v1.2
Added circularGun, enemy fires it too

## v1.1

Fixed linear gun: does not offer future positions outside the field
Fixed contribution of enemy energy to the target weight, it use to select 
most energetic enemies.

Redone weight calculations for best target selection, among other things it
takes in account enemy hit rate and fire count only after some amount of
rounds (5) played.

Bot position danger includes its energy.

## v1.0
v0.7 - 0.9 are skipped since v1.0 has quite drastic changes.

Enemy fires a wave to everyone (might be too CPU intensive).

Do not fire enemy wave if its energy drop is due to the master bot hit.

Count guns success stats.

Chose gun according to its virtual hit probability.

Chose target according to distance, energy, hit probability, survival stats, etc.

Fix a bug: did not detect a bullet with energy very close to 0.1, Diamond
likes to fire such one close to the end of melee.

## v0.6
Improved enemy firing solution generation. Take in account that at fire time
they now target bot stats for the previous tick time.

My bot does not anymore slam the brake, when all enemy are dead. Since bullets
are still flying.

Keep track of bots hit rate and hit by others rate.

Longer default danger path prediction (8 -> 32) should help against rammers



## v0.5
Master bot use position in future to calculate its firing position, thus
correct path prediction of my own bullets. So far I still use only headOn and
linear guns.


## v0.4 - 0.1
lost in history since the frame work was taken from IWillFireNoBullet robot.
So see its version history.

